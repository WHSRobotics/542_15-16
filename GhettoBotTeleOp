package com.qualcomm.ftcrobotcontroller.opmodes;

/**
 * Created by DanielWang on 8/9/15.
 */

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;

public class GhettoBotTeleOp extends OpMode{
    double powerLeft = 1.0;     // was 0.5
    double powerRight = 1.0;    // was 0.5
    double powerUp = -0.001;    //Is in increments of ten-thousandths so to no make too much of a change
    double powerDown = 0.001;
    double flyWheelPower;
    double positionServo = 0.5;
    boolean powerDownBool;
    DcMotor motorRight;
    //DcMotor motorRight2;
    DcMotor motorLeft;
    //DcMotor motorLeft2;
    DcMotor intakeLeft;
    DcMotor intakeRight;
    DcMotor flyWheelsLeft;
    DcMotor flyWheelsRight;
    Servo shooter;

    public void init()
    {
        motorRight = hardwareMap.dcMotor.get("motor_1");
        //motorRight2 = hardwareMap.dcMotor.get("motor_2");
        motorLeft = hardwareMap.dcMotor.get("motor_3");
        //motorLeft2 = hardwareMap.dcMotor.get("motor_4");
        intakeLeft = hardwareMap.dcMotor.get("motor_5");
        intakeRight = hardwareMap.dcMotor.get("motor_6");
        flyWheelsLeft = hardwareMap.dcMotor.get("motor_7");
        flyWheelsRight = hardwareMap.dcMotor.get("motor_8");
        shooter = hardwareMap.servo.get("servo_1");
        motorLeft.setDirection(DcMotor.Direction.REVERSE);
        //motorLeft2.setDirection(DcMotor.Direction.REVERSE);
        intakeLeft.setDirection(DcMotor.Direction.REVERSE);
        flyWheelsLeft.setDirection(DcMotor.Direction.REVERSE);
        powerDownBool = false;

    }
    // The ramp up and downs probably didn't work because of previously added while loops

    public void motorPowerUp()
    {
        /*
        if(powerUp > flyWheelPower)
        {
            if(flyWheelPower == -0.9)
            {
                if(powerUp <= -0.9)
                {
                    //flyWheelPower = -1.0;
                    flyWheelsRight.setPower(flyWheelPower);
                    flyWheelsLeft.setPower(flyWheelPower);
                }
            }
            else
            {
                flyWheelsRight.setPower(flyWheelPower);
                flyWheelsLeft.setPower(flyWheelPower);
                powerUp = powerUp - 0.001;
            }
        }
        else if(powerUp <= flyWheelPower)
        {
            flyWheelsRight.setPower(flyWheelPower);
            flyWheelsLeft.setPower(flyWheelPower);
        }
        */
        if(powerDownBool == true)
        {
            flyWheelPower = -0.1;
        }
        else
        {
        }
        if(flyWheelPower > -0.9)
        {
            flyWheelsRight.setPower(flyWheelPower);
            flyWheelsLeft.setPower(flyWheelPower);
            flyWheelPower = flyWheelPower + powerUp;
        }
        else
        {
            flyWheelsRight.setPower(flyWheelPower);
            flyWheelsLeft.setPower(flyWheelPower);
        }
    }

    public void motorPowerDown()
    {
        if(flyWheelPower < 0.0)
        {

            //flyWheelsRight.setPower(flyWheelPower);
            //flyWheelsLeft.setPower(flyWheelPower);
            //flyWheelPower = flyWheelPower + powerDown;
            if(flyWheelPower >= 0.0)
            {
                flyWheelsRight.setPower(0.0);
                flyWheelsLeft.setPower(0.0);
            }
            else
            {
                flyWheelsRight.setPower(flyWheelPower);
                flyWheelsLeft.setPower(flyWheelPower);
                flyWheelPower = flyWheelPower + powerDown;
            }

        }
        else
        {
            flyWheelPower = 0.0;
            flyWheelsRight.setPower(flyWheelPower);
            flyWheelsLeft.setPower(flyWheelPower);
        }
        if(flyWheelPower == 0.0)
        {
            powerDownBool = true;
        }
        else if(flyWheelPower != 0.0)
        {
            powerDownBool = false;
        }
    }
/*
    public void flyWheels()
    {
        if(gamepad2.a)
        {
            flyWheelPower = -0.9;
            //motorPowerUp();
            flyWheelsRight.setPower(flyWheelPower);
            flyWheelsLeft.setPower(flyWheelPower);
        }
        else if(gamepad2.b)
        {
            flyWheelPower = -0.75;
            //motorPowerUp();
            flyWheelsRight.setPower(flyWheelPower);
            flyWheelsLeft.setPower(flyWheelPower);
        }
        else if(gamepad2.x)
        {
            flyWheelPower = -0.3;
            //motorPowerUp();
            flyWheelsRight.setPower(flyWheelPower);
            flyWheelsLeft.setPower(flyWheelPower);
        }
        else if(gamepad2.y)
        {
            flyWheelPower = 0.0;
            flyWheelsRight.setPower(flyWheelPower);
            flyWheelsLeft.setPower(flyWheelPower);
        }
        if(!gamepad2.x || !gamepad2.x || !gamepad2.b)
        {
            if(!gamepad2.x)
            {
                flyWheelPower = -0.3;
            }
            else if(!gamepad2.b)
            {
                flyWheelPower = -0.5;
            }
            else if(!gamepad2.x)
            {
                flyWheelPower = -0.9;
            }
            motorPowerDown();
        }
    }*/
    public void loop()
    {
        float right = gamepad1.right_stick_y;
        float left = gamepad1.left_stick_y;

        // Original Code for drive train

        motorRight.setPower(-left);
        //motorRight2.setPower(right);
        motorLeft.setPower(-right);
        //motorLeft2.setPower(left);


        //Test 1 code for drive train // fail
        //Goal is to be able to turn move forward as well as turn at the same time instead of
        //stopping and changing direction
        /*
        if(right > 0 || right < 0)
        {
            motorLeft.setPower(-right);
        }
        else
        {
            motorLeft.setPower(0.0);
        }
        if(left > 0 || left < 0)
        {
            motorRight.setPower(-left);
        }
        else
        {
            motorRight.setPower(0.0);
        }
        */

        //Test 2 code for drive train
        /*
        if(right > 0 || right < 0)
        {
            if(left > 0 || left < 0)
            {
                motorLeft.setPower(-right);
                motorRight.setPower(-left);
            }
            else
            {
                motorLeft.setPower(-right);
            }
        }
        else if(left > 0 || left < 0)
        {
            if(right > 0 || right < 0)
            {
                motorRight.setPower(-left);
                motorLeft.setPower(-right);
            }
            else
            {
                motorRight.setPower(-left);
            }
        }
        else
        {
            motorLeft.setPower(0.0);
            motorRight.setPower(0.0);
        }
        */
        // Test3
        /*
        if(right > 0 && left > 0)
        {
            motorRight.setPower(-left);
            motorLeft.setPower(-right);

        }
        else if(right > 0.13 && left < 0.13)
        {
            motorRight.setPower(-left);
            motorLeft.setPower(-right);
        }
        else if(right < 0.13 && left > 0.13)
        {
            motorRight.setPower(-left);
            motorLeft.setPower(-right);
        }
        else if(right < 0.13 && left < 0.13)
        {
            motorRight.setPower(-left);
            motorLeft.setPower(-right);
        }
        else
        {
            motorRight.setPower(0.0);
            motorLeft.setPower(0.0);
        }
        */

        if(gamepad1.right_bumper) {
            intakeLeft.setPower(powerLeft);
            intakeRight.setPower(powerRight);
        }
        else if(gamepad1.right_trigger == 1.0)
        {
            intakeLeft.setPower(-powerLeft);
            intakeRight.setPower(-powerRight);
        }
        else
        {
            intakeLeft.setPower(0.0);
            intakeRight.setPower(0.0);
        }
        //Shooter
        //flyWheels();
        /*
        if(gamepad2.a)
        {
            //flyWheelPower = -0.9;
            motorPowerUp();
            //flyWheelsRight.setPower(flyWheelPower);
            //flyWheelsLeft.setPower(flyWheelPower);
        }
        else if(gamepad2.b)
        {
            //flyWheelPower = -0.75;
            motorPowerUp();
            //flyWheelsRight.setPower(flyWheelPower);
            //flyWheelsLeft.setPower(flyWheelPower);
        }
        */
        if(gamepad2.x)
        {
            //flyWheelPower = -0.3;
            motorPowerUp();
            //flyWheelsRight.setPower(flyWheelPower);
            //flyWheelsLeft.setPower(flyWheelPower);
        }
        else if(gamepad2.y)
        {
            motorPowerDown();
        }
        /*
        else if(!gamepad2.b)
        {
            flyWheelPower = -0.5;
            //motorPowerDown();
        }
        else if(!gamepad2.x)
        {
            flyWheelPower = -0.9;
            //motorPowerDown();
        }
        /*
        else if(gamepad2.y)
        {
            flyWheelsRight.setPower(-0.25);
            flyWheelsLeft.setPower(-0.25);
        }
        */



        //Drops balls into the flywheels
        if(gamepad2.right_bumper)
        {
            positionServo = 0.9;
            shooter.setPosition(positionServo);
        }
        else
        {
            positionServo = 0.5;
            shooter.setPosition(positionServo);
        }
        // End of shooter code


        //Displays various variables on the phone
        telemetry.addData("servo", "servo:  " + String.format("%.2f", positionServo));
        telemetry.addData("flywheelpower", "flywheelpower:  " + String.format("%.2f", flyWheelPower));
        //telemetry.addData("powerup", "powerup:  " + String.format("%.2f", powerUp));
    }

    public void stop()
    {

    }
}
